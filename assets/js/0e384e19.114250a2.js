"use strict";(self.webpackChunk_graphy_ng_docs=self.webpackChunk_graphy_ng_docs||[]).push([[671],{5318:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),g=a,m=c["".concat(p,".").concat(g)]||c[g]||d[g]||o;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2474:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var r=t(9603),a=t(120),o=(t(7378),t(5318)),i=["components"],l={sidebar_position:1},p="Introduction",s={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Introduction",description:"graphy-ng is a renderer for directed graphs in Angular. Under the hood, Dagre is used as a layout engine and the graph is rendered using SVGs.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/graphy-ng/docs/intro",editUrl:"https://github.com/lars-berger/graphy-ng/edit/main/docs/docs/intro.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Graph inputs & outputs",permalink:"/graphy-ng/docs/api-reference/graph-inputs-outputs"}},u=[{value:"Installation",id:"installation",children:[]},{value:"Basic usage",id:"basic-usage",children:[]},{value:"Comparison vs. ngx-graph",id:"comparison-vs-ngx-graph",children:[]}],d={toc:u};function c(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"graphy-ng")," is a renderer for directed graphs in Angular. Under the hood, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/dagrejs/dagre"},"Dagre")," is used as a layout engine and the graph is rendered using SVGs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"The library is compiled with Ivy and requires Angular 12+")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Using npm:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ npm i graphy-ng @types/d3-shape\n")),(0,o.kt)("p",null,"Using yarn:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ yarn add graphy-ng @types/d3-shape\n")),(0,o.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,o.kt)("p",null,"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphyModule")," into your feature module."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="family-tree.module.ts"',title:'"family-tree.module.ts"'},"@NgModule({\n  imports: [GraphyModule],\n  declarations: [FamilyTreeComponent],\n})\nexport class FamilyTreeModule {}\n")),(0,o.kt)("p",null,"Consume ",(0,o.kt)("inlineCode",{parentName:"p"},"graphy-ng")," in your component, providing templates for how nodes and edges should be rendered."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="family-tree.component.html"',title:'"family-tree.component.html"'},'<p>Here\'s my pretty graph:</p>\n<graphy-ng>\n  <ng-container *defsTemplate>\n    <svg:marker\n      id="arrow"\n      viewBox="0 -5 10 10"\n      refX="8"\n      refY="0"\n      markerWidth="4"\n      markerHeight="4"\n      orient="auto"\n    >\n      <svg:path d="M0,-5L10,0L0,5" />\n    </svg:marker>\n  </ng-container>\n\n  <ng-container *nodeTemplate="let node; nodes: nodes">\n    <svg:circle cx="25" cy="25" r="25" />\n    <svg:text fill="blue" transform="translate(0 30)">{{ node.data.name }}</svg:text>\n  </ng-container>\n\n  <ng-container *edgeTemplate="let edge; edges: edges">\n    <svg:path marker-end="url(#arrow)" [attr.d]="edge.pathDefinition"></svg:path>\n  </ng-container>\n</graphy-ng>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="family-tree.component.ts"',title:'"family-tree.component.ts"'},"@Component({\n  ...\n})\nexport class FamilyTreeComponent {\n  nodes: InputNode<{ name: string }>[] = [\n    { id: '1', data: { name: 'Carl' } },\n    { id: '2', data: { name: 'Robin' } },\n    { id: '3', data: { name: 'Jeremy' } },\n  ];\n\n  edges: InputEdge[] = [\n    { sourceId: '1', targetId: '3', },\n    { sourceId: '2', targetId: '3', },\n  ];\n}\n")),(0,o.kt)("h2",{id:"comparison-vs-ngx-graph"},"Comparison vs. ngx-graph"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Pros:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Significantly more lightweight. Production bundle size of a fresh Angular app decreased from ",(0,o.kt)("inlineCode",{parentName:"li"},"490kb")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"255kb")," by switching libraries (",(0,o.kt)("strong",{parentName:"li"},"36% overall decrease")," in app size)."),(0,o.kt)("li",{parentName:"ul"},"Input nodes and edges are not modified by the library."),(0,o.kt)("li",{parentName:"ul"},"Avoids requiring certain CSS classes to be hard-coded when using custom templates."),(0,o.kt)("li",{parentName:"ul"},"Full TypeScript support when using custom templates.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Cons:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Lacks more advanced and niche features \u2014 namely clusters, custom/force-directed layouts, and graph minimaps.")))}c.isMDXComponent=!0}}]);