"use strict";(self.webpackChunk_graphy_ng_docs=self.webpackChunk_graphy_ng_docs||[]).push([[69],{5318:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),o=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=o(n),c=r,g=s["".concat(d,".").concat(c)]||s[c]||u[c]||l;return n?a.createElement(g,i(i({ref:t},m),{},{components:n})):a.createElement(g,i({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5984:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return o},toc:function(){return m},default:function(){return s}});var a=n(9603),r=n(120),l=(n(7378),n(5318)),i=["components"],p={sidebar_position:3},d="Custom templates",o={unversionedId:"api-reference/custom-templates",id:"api-reference/custom-templates",isDocsHomePage:!1,title:"Custom templates",description:"The appearance and behavior of your graph is customizable with custom templates for nodes, edges, and SVG defs. Node and edge templates are required.",source:"@site/docs/api-reference/custom-templates.md",sourceDirName:"api-reference",slug:"/api-reference/custom-templates",permalink:"/graphy-ng/docs/api-reference/custom-templates",editUrl:"https://github.com/lars-berger/graphy-ng/edit/main/docs/docs/api-reference/custom-templates.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Graph methods",permalink:"/graphy-ng/docs/api-reference/graph-methods"},next:{title:"Interactive example",permalink:"/graphy-ng/docs/interactive-example"}},m=[{value:"Defs template",id:"defs-template",children:[]},{value:"Edge template",id:"edge-template",children:[{value:"Edge template inputs",id:"edge-template-inputs",children:[]},{value:"Edge template context",id:"edge-template-context",children:[]}]},{value:"Node template",id:"node-template",children:[{value:"Node template inputs",id:"node-template-inputs",children:[]},{value:"Node template context",id:"node-template-context",children:[]}]}],u={toc:m};function s(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"custom-templates"},"Custom templates"),(0,l.kt)("p",null,"The appearance and behavior of your graph is customizable with custom templates for nodes, edges, and SVG defs. Node and edge templates are required."),(0,l.kt)("h2",{id:"defs-template"},"Defs template"),(0,l.kt)("p",null,"The defs template can be used to define SVG objects that will be consumed by the node or edge templates. In the example below, an SVG of an arrow is defined, which can then be referenced by its ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," in the edge template."),(0,l.kt)("p",null,"Not required if no defs are needed for the node or edge templates."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<ng-container *defsTemplate>\n  <svg:marker\n    id="arrow"\n    viewBox="0 -5 10 10"\n    refX="8"\n    refY="0"\n    markerWidth="4"\n    markerHeight="4"\n    orient="auto"\n  >\n    <svg:path d="M0,-5L10,0L0,5" />\n  </svg:marker>\n</ng-container>\n')),(0,l.kt)("h2",{id:"edge-template"},"Edge template"),(0,l.kt)("p",null,"The edge template is used for rendering the edges between nodes and exposes the ",(0,l.kt)("inlineCode",{parentName:"p"},"edge")," template variable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<ng-container *edgeTemplate="let edge; edges: edges">\n  <svg:path marker-end="url(#arrow)" [attr.d]="edge.pathDefinition"></svg:path>\n</ng-container>\n')),(0,l.kt)("h3",{id:"edge-template-inputs"},"Edge template inputs"),(0,l.kt)("p",null,"Inputs that can be passed to the ",(0,l.kt)("inlineCode",{parentName:"p"},"*edgeTemplate")," structural directive:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"edges"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"InputEdge[]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]")),(0,l.kt)("td",{parentName:"tr",align:null},"The array of edges to display in the graph.")))),(0,l.kt)("h3",{id:"edge-template-context"},"Edge template context"),(0,l.kt)("p",null,"Properties defined on the ",(0,l.kt)("inlineCode",{parentName:"p"},"edge")," template variable of type ",(0,l.kt)("inlineCode",{parentName:"p"},"EdgeContext<E>"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The unique identifier of the edge.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sourceId"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the node to point from.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"targetId"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the node to point to.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pathDefinition"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The path to be drawn. Can be bound to the ",(0,l.kt)("inlineCode",{parentName:"td"},"d")," attribute of a ",(0,l.kt)("inlineCode",{parentName:"td"},"<svg:path>")," element.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<E>")),(0,l.kt)("td",{parentName:"tr",align:null},"The data associated with an edge.")))),(0,l.kt)("h2",{id:"node-template"},"Node template"),(0,l.kt)("p",null,"The node template is used for rendering the nodes and exposes the ",(0,l.kt)("inlineCode",{parentName:"p"},"node")," template variable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<ng-container *nodeTemplate="let node; nodes: nodes">\n  <svg:circle cx="25" cy="25" r="25" />\n  <svg:text fill="blue" transform="translate(0 30)">{{ node.data.name }}</svg:text>\n</ng-container>\n')),(0,l.kt)("h3",{id:"node-template-inputs"},"Node template inputs"),(0,l.kt)("p",null,"Inputs that can be passed to the ",(0,l.kt)("inlineCode",{parentName:"p"},"*nodeTemplate")," structural directive:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nodes"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"InputNode[]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]")),(0,l.kt)("td",{parentName:"tr",align:null},"The array of nodes to display in the graph.")))),(0,l.kt)("h3",{id:"node-template-context"},"Node template context"),(0,l.kt)("p",null,"Properties defined on the ",(0,l.kt)("inlineCode",{parentName:"p"},"node")," template variable of type ",(0,l.kt)("inlineCode",{parentName:"p"},"NodeContext<N>"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:null},"The unique identifier of the node.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"<N>")),(0,l.kt)("td",{parentName:"tr",align:null},"The data associated with a node.")))))}s.isMDXComponent=!0}}]);